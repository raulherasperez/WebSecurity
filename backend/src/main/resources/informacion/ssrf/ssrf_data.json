{
  "descripcion": "El **Server-Side Request Forgery (SSRF)** es una vulnerabilidad que permite a un atacante manipular a un servidor para que realice peticiones HTTP o de otro tipo a recursos internos o externos, normalmente controlando la URL o el destino de la petición. Esto puede permitir al atacante acceder a información interna, interactuar con servicios privados, escanear la red interna, o incluso acceder a metadatos sensibles en servicios en la nube.\n\nSSRF ocurre cuando una aplicación web obtiene una URL o dirección de destino desde la entrada del usuario y la utiliza para realizar una petición desde el backend, sin validar adecuadamente el destino. Si el atacante puede controlar la URL, puede hacer que el servidor acceda a recursos internos (por ejemplo, `http://localhost`, `http://127.0.0.1`, `http://169.254.169.254` en AWS) o a servicios protegidos por firewalls.\n\n- **Acceso a recursos internos:** El atacante puede leer datos de servicios internos no expuestos públicamente.\n- **Escaneo de red interna:** El atacante puede descubrir servicios y puertos abiertos en la red privada.\n- **Acceso a metadatos en la nube:** En entornos cloud, puede acceder a endpoints como `169.254.169.254` para obtener credenciales temporales.\n- **Bypass de controles de acceso:** El atacante puede acceder a recursos restringidos desde el backend.\n\n**¿Quieres saber más?** Consulta estos recursos recomendados:\n\n- [OWASP: Server-Side Request Forgery (SSRF)](https://owasp.org/www-community/attacks/Server_Side_Request_Forgery)\n- [PortSwigger Web Security Academy: SSRF](https://portswigger.net/web-security/ssrf)\n- [OWASP SSRF Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)\n",
  "descripcionEjercicios": "## Ejercicio: Explota SSRF para acceder a recursos internos\n\n**Contexto:** Imagina que eres administrador de una tienda online y tienes acceso a un panel de administración donde puedes gestionar productos, usuarios y ver estadísticas. \nEl panel incluye una funcionalidad para obtener una **vista previa de la imagen de un producto** a partir de una URL externa. \nEsta funcionalidad es vulnerable a SSRF, ya que el backend descarga cualquier recurso solicitado sin validar el destino.\n\nTu objetivo es explotar esta funcionalidad para hacer que el servidor acceda a recursos internos o protegidos, demostrando la vulnerabilidad SSRF. \nPuedes hacerlo directamente desde el formulario de vista previa de imagen en el entorno vulnerable, introduciendo URLs internas o de servicios sensibles.\n",
  "pistas": {
    "facil": "Puedes usar cualquier URL, incluyendo direcciones internas como localhost, 127.0.0.1 o metadatos cloud. El backend no valida nada.",
    "medio": "El backend bloquea 'localhost' y '127.0.0.1', pero puedes probar variantes como 127.1, 0x7f000001 o direcciones privadas.",
    "dificil": "El backend bloquea rangos privados y metadatos cloud, pero puedes intentar técnicas de evasión como hexadecimal, DNS rebinding o dominios que resuelvan a IPs internas.",
    "imposible": "Solo se permiten imágenes de Unsplash. El backend valida correctamente la URL y no puedes acceder a recursos internos ni externos arbitrarios."
  },
  "soluciones": {
    "facil": "1. Introduce una URL interna como `http://localhost:5001/usuarios` o `http://169.254.169.254/latest/meta-data/` en el formulario de vista previa.\n2. El backend accederá y mostrará el contenido interno o sensible.\n3. ¡Has explotado la vulnerabilidad SSRF!",
    "medio": "1. Introduce `http://127.0.0.1:5001/usuarios` y verás que está bloqueado.\n2. Prueba variantes como `http://127.1:5001/usuarios` o `http://0x7f000001:5001/usuarios`.\n3. El backend puede permitir estas variantes y mostrarte datos internos.\n¿No funciona? ¡No te preocupes! Probablemente estarás usando Windows. En algunos sistemas operativos, las variantes de las direcciones IPs no funcionan.",
    "dificil": "1. Introduce una IP privada (`http://192.168.1.10:8080/`) o metadatos cloud (`http://169.254.169.254/`).\n2. El backend debería bloquearlas, pero puedes intentar técnicas avanzadas como hexadecimal, DNS rebinding o dominios que resuelvan a IPs internas.\n3. Si logras saltar el filtro, explotarás la vulnerabilidad.",
    "imposible": "1. Solo puedes usar URLs de imágenes de Unsplash (`https://images.unsplash.com/...`).\n2. Cualquier otro destino será bloqueado por el backend.\n3. No puedes explotar SSRF en este nivel."
  },
  "explicaciones": {
    "facil": "### Nivel Fácil\nEl backend no valida la URL proporcionada por el usuario. Puedes acceder a cualquier recurso interno o externo, incluyendo servicios internos, metadatos cloud y más.\n\n```python\n@app.route('/ssrf-producto-preview')\ndef ssrf_producto_preview():\n    url = request.args.get('url')\n    # Sin validación\n    resp = requests.get(url)\n    return Response(resp.content)\n```\nEsto permite explotar SSRF fácilmente.",
    "medio": "### Nivel Medio\nEl backend bloquea solo 'localhost' y '127.0.0.1', pero puedes evadir el filtro usando variantes como 127.1, 0x7f000001, etc.\n\n```python\nif 'localhost' in url or '127.0.0.1' in url:\n    return \"Acceso a localhost bloqueado\"\n```\nEl filtro es insuficiente y permite bypasses sencillos.\n\nSin embargo, no en todos los sistemas operativos funcionan las variantes de las direcciones IPs. Por ejemplo, en Windows, `127.1` no es lo mismo que `127.0.0.1` y `0x7f000001` no es lo mismo que `127.0.0.1`. Por lo tanto, si estás usando Windows, no podrás usar estas variantes.",
    "dificil": "### Nivel Difícil\nEl backend bloquea rangos privados y metadatos cloud, pero aún puedes intentar técnicas de evasión avanzadas.\n\n```python\nif re.search(r'127\\.|localhost|10\\.|192\\.168\\.|169\\.254\\.169\\.254', url):\n    return \"Acceso a IPs privadas/metadatos bloqueado\"\n```\nEl filtro es mejor, pero no perfecto.",
    "imposible": "### Nivel Imposible\nEl backend solo permite imágenes de Unsplash. Cualquier otro destino es bloqueado.\n\n```python\nif not url.startswith('https://images.unsplash.com/'):\n    return \"Solo se permiten imágenes de Unsplash\"\n```\nAsí se evita la vulnerabilidad SSRF."
  },
  "ejemplo": "### Ejemplo 1: Lectura de recursos internos\nUna aplicación permite a los usuarios obtener una vista previa de una imagen proporcionando una URL. El backend descarga la imagen usando la URL proporcionada:\n\n```http\nGET /preview?url=http://example.com/imagen.jpg\n```\n\nSi el usuario envía `http://localhost:8080/admin` o `http://127.0.0.1:8000/secret`, el servidor podría acceder a recursos internos no expuestos públicamente.\n\n---\n\n### Ejemplo 2: Acceso a metadatos en la nube\nEn servicios cloud como AWS, existe un endpoint especial para metadatos:\n\n```http\nGET /preview?url=http://169.254.169.254/latest/meta-data/iam/security-credentials/\n```\n\nSi el backend accede a esta URL, el atacante podría obtener credenciales temporales de la instancia y comprometer toda la infraestructura.\n\n---\n\n### Ejemplo 3: Escaneo de red interna\nEl atacante puede probar diferentes direcciones IP y puertos internos:\n\n```http\nGET /preview?url=http://192.168.1.10:8080/\n```\n\nAnalizando los tiempos de respuesta o los mensajes de error, el atacante puede mapear la red interna y descubrir servicios ocultos."
}