{
  "descripcion": "El **Broken Access Control** es una de las vulnerabilidades más frecuentes y peligrosas en aplicaciones web modernas. Ocurre cuando una aplicación no restringe correctamente el acceso a recursos o acciones, permitiendo a usuarios no autorizados realizar operaciones restringidas. Esto puede deberse a la ausencia de comprobaciones de permisos, validaciones insuficientes en el backend o confiar únicamente en el frontend para controlar el acceso.\n\nLas consecuencias de Broken Access Control pueden ser muy graves: exposición de datos sensibles, modificación o borrado de información de otros usuarios, escalada de privilegios, acceso a funcionalidades administrativas, entre otros. Es una de las principales causas de brechas de seguridad y está en el puesto #1 del [OWASP Top 10](https://owasp.org/Top10/A01_2021-Broken_Access_Control/).\n\n- **Acceso a datos de otros usuarios:** Ver o modificar información personal ajena.\n- **Escalada de privilegios:** Obtener permisos de administrador o acceder a funciones restringidas.\n- **Modificación o borrado de recursos ajenos:** Cambiar o eliminar datos de otros usuarios.\n- **Acceso a paneles de administración:** Entrar en áreas reservadas sin autorización.\n\n**¿Quieres saber más?** Consulta estos recursos recomendados:\n\n- [OWASP Top 10: Broken Access Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control/)\n- [PortSwigger Web Security Academy: Access Control](https://portswigger.net/web-security/access-control)\n- [OWASP Access Control Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Access_Control_Cheat_Sheet.html)\n",
  "descripcionEjercicios": "## Ejercicio: Explota Broken Access Control\n\n**Contexto:** Imagina que participas en una aplicación donde puedes ver y editar tus propios datos. Sin embargo, la aplicación no comprueba correctamente los permisos y podrías acceder o modificar datos de otros usuarios cambiando parámetros en la URL o en las peticiones.\n\nInicia sesión como John en el usuario y john en la contraseña, accederás a una página de edición de perfil.\n\n¿Podrás ser capaz de ver y editar otros perfiles del entorno?\n",
  "pistas": {
    "facil": "No hay ningún control de acceso en el backend. Cambia el parámetro id en la URL o petición y accede a cualquier perfil.",
    "medio": "El frontend oculta opciones, pero el backend sigue sin comprobar permisos. Cambia el parámetro id en la petición y podrás acceder a otros perfiles.",
    "dificil": "Solo puedes modificar tu propio perfil, pero puedes ver los de otros usuarios cambiando el parámetro id.",
    "imposible": "El backend comprueba siempre que solo puedes ver y modificar tu propio perfil. No podrás acceder a datos ajenos aunque cambies el parámetro id."
  },
  "soluciones": {
    "facil": "1. Inicia sesión como un usuario normal.\n2. Accede a tu perfil.\n3. Cambia el parámetro `id` en la URL o petición por el de otro usuario.\n4. Podrás ver y modificar datos ajenos sin restricción.",
    "medio": "1. Inicia sesión y accede a tu perfil.\n2. El frontend puede ocultar opciones, pero si cambias el parámetro `id` en la petición, podrás acceder a otros perfiles igualmente.",
    "dificil": "1. Inicia sesión y accede a tu perfil.\n2. Cambia el parámetro `id` en la URL o petición por el de otro usuario.\n3. Podrás ver datos ajenos, pero solo modificar tu propio perfil.",
    "imposible": "1. Inicia sesión y accede a tu perfil.\n2. Intenta cambiar el parámetro `id` por el de otro usuario.\n3. El backend te impedirá ver o modificar datos ajenos."
  },
  "explicaciones": {
    "facil": "### Nivel Fácil\nEl backend no realiza ninguna comprobación de permisos. Cualquier usuario puede acceder o modificar los datos de cualquier otro usuario simplemente cambiando el parámetro `id` en la URL o petición.\n\n```python\n@app.route('/perfil', methods=['GET', 'POST'])\ndef perfil_usuario():\n    usuario_id = request.args.get('id')\n    # ...sin comprobación de permisos...\n```\nEsto permite explotar fácilmente la vulnerabilidad de Broken Access Control.",
    "medio": "### Nivel Medio\nEl frontend oculta opciones o botones, pero el backend sigue sin comprobar permisos. Un atacante puede modificar el parámetro `id` en la petición y acceder a datos ajenos.\n\n```python\n// El backend sigue igual que en nivel fácil, solo el frontend protege\n```\nNunca confíes en el frontend para la seguridad.",
    "dificil": "### Nivel Difícil\nEl backend solo permite modificar tu propio perfil, pero puedes ver los de otros usuarios. Así, la lectura sigue siendo vulnerable, pero la modificación está protegida.\n\n```python\nif request.method == 'POST' and usuario_id != usuario_sesion_id:\n    return jsonify({\"error\": \"No tienes permiso para modificar este perfil\"}), 403\n```\nEs un avance, pero aún puedes ver datos ajenos.",
    "imposible": "### Nivel Imposible\nEl backend comprueba siempre que solo puedes ver y modificar tu propio perfil. No puedes acceder a datos ajenos aunque cambies el parámetro `id`.\n\n```python\nif usuario_id != usuario_sesion_id:\n    return jsonify({\"error\": \"No tienes permiso para acceder a este perfil\"}), 403\n```\nEs el nivel más seguro y realista."
  },
  "ejemplo": "### Ejemplo 1: Acceso a perfil ajeno\nImagina una aplicación donde los usuarios pueden ver y editar su perfil accediendo a `/perfil/usuario1`. Si un usuario puede acceder a `/perfil/usuario2` simplemente cambiando la URL, existe un problema de Broken Access Control.\n\n```http\nGET /perfil/usuario2\n```\n\nSi la aplicación no verifica que el usuario autenticado es realmente el dueño del perfil solicitado, cualquier usuario podría ver o modificar datos ajenos.\n\n---\n\n### Ejemplo 2: Escalada de privilegios\nUn usuario normal descubre que puede acceder a `/admin` o enviar peticiones para cambiar su rol a administrador, simplemente manipulando parámetros en la URL o en el cuerpo de la petición.\n\n```http\nPOST /cambiar-rol\n{\n  \"usuario\": \"juan\",\n  \"rol\": \"admin\"\n}\n```\n\nSi el backend no valida que el usuario tiene permiso para cambiar su propio rol, podría convertirse en administrador.\n\n---\n\n### Ejemplo 3: Modificación de recursos ajenos\nUn usuario puede borrar o modificar recursos de otros simplemente cambiando el identificador en la petición:\n\n```http\nDELETE /documentos/123\n```\n\nSi no se comprueba que el usuario es el dueño del documento, podría eliminar documentos de otros usuarios."
}