{
  "descripcion": "El **Cross-Site Scripting (XSS)** es una de las vulnerabilidades más comunes y peligrosas en aplicaciones web. Ocurre cuando una aplicación permite que datos no confiables (proporcionados por el usuario) se inserten en una página web sin la validación o el escape adecuado, permitiendo que un atacante inyecte y ejecute código JavaScript malicioso en el navegador de otros usuarios.\n\nLos ataques XSS pueden tener consecuencias graves, como el robo de información sensible, suplantación de identidad, manipulación de la interfaz, redirección a sitios maliciosos, y mucho más. Los atacantes pueden aprovechar XSS para robar cookies de sesión, capturar pulsaciones de teclado, mostrar formularios falsos, modificar el contenido de la página o incluso propagar malware.\n\n- **Robo de información sensible:** como cookies de sesión, tokens de autenticación o datos personales.\n- **Modificación del contenido:** el atacante puede alterar la apariencia o el comportamiento de la página para engañar a los usuarios.\n- **Redirección a sitios maliciosos:** los usuarios pueden ser enviados a páginas de phishing o descarga de malware.\n- **Propagación de gusanos:** en aplicaciones con funcionalidades sociales, un XSS puede propagarse automáticamente a otros usuarios.\n\n**¿Quieres saber más?** Consulta estos recursos recomendados:\n\n- [OWASP: Cross-site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [PortSwigger Web Security Academy: XSS](https://portswigger.net/web-security/cross-site-scripting)\n- [Hacksplaining: Ejercicio interactivo de XSS](https://www.hacksplaining.com/exercises/xss)\n- [MDN Web Docs: Tipos de ataques XSS](https://developer.mozilla.org/es/docs/Web/Security/Types_of_attacks#cross-site_scripting_xss)\n",
  "descripcionEjercicios": "## Ejercicio 1: XSS reflejado\n\nPrueba a introducir código JavaScript en el campo de búsqueda de la aplicación vulnerable. ¿Puedes hacer que se ejecute un `alert()`? Piensa cómo podrías aprovechar que el valor de búsqueda se muestra directamente en la página.\n\n---\n\n## Ejercicio 2: XSS almacenado\n\n¿Puedes guardar un comentario que ejecute código JavaScript cada vez que alguien lo vea? Prueba a dejar un comentario con un `<script>` o un `<img>` con `onerror`. Piensa cómo un atacante podría aprovechar esto para afectar a todos los usuarios que visiten la página.\n",
  "pistas": {
    "1": {
      "facil": "Prueba a escribir algún script de HTML en el campo de búsqueda. Si ves una alerta, la aplicación es vulnerable a XSS reflejado.",
      "medio": "El filtro elimina <script>, pero puedes probar con otras etiquetas. ¿Se ejecuta el código?",
      "dificil": "El escape básico impide la ejecución de etiquetas, pero ¿puedes intentar algún vector avanzado como URLs javascript: o eventos poco comunes?",
      "imposible": "No es posible ejecutar código JavaScript en este nivel. Todos los datos del usuario se muestran como texto plano."
    },
    "2": {
      "facil": "Deja un comentario con algún script de HTML. Si ves una alerta al recargar, es XSS almacenado.",
      "medio": "El filtro elimina <script>, pero puedes probar con otras etiquetas con eventos.",
      "dificil": "El escape básico impide la ejecución de etiquetas, pero ¿puedes intentar algún vector avanzado como SVG o atributos poco comunes?",
      "imposible": "No es posible ejecutar código JavaScript en los comentarios en este nivel."
    }
  },
  "soluciones": {
    "1": {
      "facil": "1. En el campo de búsqueda, escribe: `<script>alert('XSS')</script>` (puede funcionar solo la primera vez por protección del navegador).\n2. Alternativamente, prueba con: `<img src=x onerror=alert(1)>` (este vector suele funcionar siempre).\n3. Pulsa Enter o Buscar.\n4. Si ves una alerta, la aplicación es vulnerable a XSS reflejado.",
      "medio": "1. En el campo de búsqueda, escribe: `<img src=x onerror=alert(1)>`\n2. Pulsa Enter o Buscar.\n3. Si ves una alerta, la aplicación sigue siendo vulnerable a XSS reflejado.",
      "dificil": "1. El escape básico impide la ejecución de etiquetas HTML.\n2. Prueba vectores avanzados como `<svg/onload=alert(1)>` o URLs `javascript:`, pero deberían ser bloqueados.\n3. No deberías poder ejecutar código JavaScript.",
      "imposible": "No es posible ejecutar código JavaScript en este nivel. Todos los datos del usuario se muestran como texto plano."
    },
    "2": {
      "facil": "1. Deja un comentario como: `<img src=x onerror=alert('XSS')>` o `<script>alert('XSS almacenado')</script>`\n2. Recarga la página o revisa la lista de comentarios.\n3. Si ves una alerta, la aplicación es vulnerable a XSS almacenado.",
      "medio": "1. Deja un comentario como: `<img src=x onerror=alert(1)>`\n2. Recarga la página o revisa la lista de comentarios.\n3. Si ves una alerta, la aplicación sigue siendo vulnerable a XSS almacenado.",
      "dificil": "1. El escape básico impide la ejecución de etiquetas HTML.\n2. Prueba vectores avanzados como `<svg/onload=alert(1)>`, pero deberían ser bloqueados.\n3. No deberías poder ejecutar código JavaScript.",
      "imposible": "No es posible ejecutar código JavaScript en los comentarios en este nivel."
    }
  },
  "explicaciones": {
    "facil": "### Nivel Fácil\nEl frontend muestra los datos del usuario directamente en el HTML usando `dangerouslySetInnerHTML`, sin ningún tipo de filtrado ni escape. Esto permite ejecutar cualquier código JavaScript, como `<script>alert(1)</script>` o `<img src=x onerror=alert(1)>`.\n\n```jsx\n<div dangerouslySetInnerHTML={{ __html: valorUsuario }} />\n```\nEs el escenario más vulnerable y didáctico para practicar ataques XSS reflejado y almacenado.",
    "medio": "### Nivel Medio\nEl frontend elimina solo las etiquetas `<script>`, pero permite otras etiquetas y atributos peligrosos como `onerror` en imágenes. Esto permite XSS usando vectores alternativos.\n\n```js\nvalorUsuario.replace(/<\\s*script.*?>.*?<\\s*\\/\\s*script\\s*>/gi, '')\n```\nEs más seguro que el nivel fácil, pero sigue siendo vulnerable a muchos vectores de XSS.",
    "dificil": "### Nivel Difícil\nEl frontend escapa los caracteres HTML básicos (&lt;, &gt;, \", ', &amp;), por lo que las etiquetas no se interpretan como HTML. Sin embargo, algunos vectores avanzados podrían funcionar si el escape no es completo.\n\n```js\nvalorUsuario.replace(/[&<>\"']/g, m => map[m])\n```\nLa mayoría de los ataques XSS quedan bloqueados, pero aún podrían existir vectores muy avanzados si el escape no es perfecto.",
    "imposible": "### Nivel Imposible\nEl frontend elimina todas las etiquetas HTML y muestra solo texto plano. No es posible ejecutar ningún código JavaScript, ni siquiera con vectores avanzados.\n\n```js\nvalorUsuario.replace(/<[^>]*>?/gm, '')\n```\nEs el nivel más seguro y realista para una aplicación protegida contra XSS."
  },
  "ejemplo": "### Ejemplo 1: XSS reflejado\nImagina un formulario de búsqueda en una web que muestra el término buscado sin validación:\n\n```html\n<div>Resultados para: {busquedaUsuario}</div>\n```\n\nSi el usuario introduce `<script>alert('XSS')</script>`, el navegador ejecutará ese código, mostrando una alerta. Esto ocurre porque el valor de búsqueda se inserta directamente en el HTML sin escape.\n\n---\n\n### Ejemplo 2: XSS almacenado\nSupón que tienes un sistema de comentarios donde los mensajes se guardan y se muestran a todos los usuarios:\n\n```html\n<div class=\"comentario\">{comentarioUsuario}</div>\n```\n\nSi un atacante publica `<img src=\"x\" onerror=\"alert('XSS almacenado')\">`, cada vez que alguien vea ese comentario, se ejecutará el código JavaScript.\n\n---\n\n### Ejemplo 3: XSS basado en DOM\nUn script en el frontend manipula el DOM usando datos de la URL:\n\n```js\nconst valor = location.hash.substring(1);\ndocument.getElementById('saludo').innerHTML = valor;\n```\n\nSi la URL es `https://ejemplo.com/#<img src=x onerror=alert(1)>`, el código se ejecutará al cargar la página."
}